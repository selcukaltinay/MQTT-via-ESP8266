
mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000310c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003348  08003348  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003350  08003350  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  080033c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080033c8  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae93  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a02  00000000  00000000  0002af33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002d038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f01  00000000  00000000  0002d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009482  00000000  00000000  000435a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085752  00000000  00000000  0004ca23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f04  00000000  00000000  000d21c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003294 	.word	0x08003294

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003294 	.word	0x08003294

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fa40 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f826 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8b8 	bl	8000708 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f88c 	bl	80006b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP8266_Init(&huart1);
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <main+0x48>)
 800059e:	f002 f9bf 	bl	8002920 <ESP8266_Init>
  Wifi_Connect("Satech","Erisilmiyor12");
 80005a2:	490c      	ldr	r1, [pc, #48]	; (80005d4 <main+0x4c>)
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <main+0x50>)
 80005a6:	f002 f9e5 	bl	8002974 <Wifi_Connect>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x54>)
 80005b2:	f000 fdeb 	bl	800118c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f000 fa9c 	bl	8000af4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <main+0x54>)
 80005c4:	f000 fde2 	bl	800118c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005c8:	2064      	movs	r0, #100	; 0x64
 80005ca:	f000 fa93 	bl	8000af4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005ce:	e7ec      	b.n	80005aa <main+0x22>
 80005d0:	20000098 	.word	0x20000098
 80005d4:	080032ac 	.word	0x080032ac
 80005d8:	080032bc 	.word	0x080032bc
 80005dc:	40020800 	.word	0x40020800

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fa1a 	bl	8002a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xd0>)
 800062e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000658:	2354      	movs	r3, #84	; 0x54
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fda9 	bl	80011c0 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f8a8 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f80b 	bl	80016b0 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a0:	f000 f892 	bl	80007c8 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART1_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ec:	f001 f9b0 	bl	8001a50 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f867 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000098 	.word	0x20000098
 8000704:	40011000 	.word	0x40011000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a25      	ldr	r2, [pc, #148]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_GPIO_Init+0xb4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_GPIO_Init+0xb4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_GPIO_Init+0xb8>)
 800077a:	f000 fd07 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800077e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	480a      	ldr	r0, [pc, #40]	; (80007c0 <MX_GPIO_Init+0xb8>)
 8000798:	f000 fb74 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800079c:	2301      	movs	r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_GPIO_Init+0xbc>)
 80007b0:	f000 fb68 	bl	8000e84 <HAL_GPIO_Init>

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020000 	.word	0x40020000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <HAL_UART_MspInit+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d134      	bne.n	80008b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_UART_MspInit+0x98>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_UART_MspInit+0x98>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_UART_MspInit+0x98>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0x98>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_UART_MspInit+0x98>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_UART_MspInit+0x98>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800087e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000890:	2307      	movs	r3, #7
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_UART_MspInit+0x9c>)
 800089c:	f000 faf2 	bl	8000e84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2025      	movs	r0, #37	; 0x25
 80008a6:	f000 fa24 	bl	8000cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008aa:	2025      	movs	r0, #37	; 0x25
 80008ac:	f000 fa3d 	bl	8000d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f8d0 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART1_IRQHandler+0x10>)
 800091e:	f001 f977 	bl	8001c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000098 	.word	0x20000098

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f002 f83a 	bl	80029d4 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20010000 	.word	0x20010000
 800098c:	00000400 	.word	0x00000400
 8000990:	2000008c 	.word	0x2000008c
 8000994:	200000f8 	.word	0x200000f8

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f001 fff9 	bl	80029e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fdcb 	bl	8000588 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a00:	08003358 	.word	0x08003358
  ldr r2, =_sbss
 8000a04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a08:	200000f4 	.word	0x200000f4

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f94f 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fec6 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f967 	bl	8000d46 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f92f 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	200000e0 	.word	0x200000e0

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000e0 	.word	0x200000e0

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff29 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff3e 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff31 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffa2 	bl	8000c98 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff feb6 	bl	8000adc <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d008      	beq.n	8000d90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e052      	b.n	8000e36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0216 	bic.w	r2, r2, #22
 8000d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d103      	bne.n	8000dc0 <HAL_DMA_Abort+0x62>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0208 	bic.w	r2, r2, #8
 8000dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000de0:	e013      	b.n	8000e0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000de2:	f7ff fe7b 	bl	8000adc <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b05      	cmp	r3, #5
 8000dee:	d90c      	bls.n	8000e0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2220      	movs	r2, #32
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e015      	b.n	8000e36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e4      	bne.n	8000de2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1c:	223f      	movs	r2, #63	; 0x3f
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d004      	beq.n	8000e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e00c      	b.n	8000e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2205      	movs	r2, #5
 8000e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e159      	b.n	8001154 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	f040 8148 	bne.w	800114e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d005      	beq.n	8000ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d017      	beq.n	8000f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d123      	bne.n	8000fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0203 	and.w	r2, r3, #3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a2 	beq.w	800114e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b57      	ldr	r3, [pc, #348]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a56      	ldr	r2, [pc, #344]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b54      	ldr	r3, [pc, #336]	; (800116c <HAL_GPIO_Init+0x2e8>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001026:	4a52      	ldr	r2, [pc, #328]	; (8001170 <HAL_GPIO_Init+0x2ec>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x2f0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x202>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2f4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x1fe>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_GPIO_Init+0x2f8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x1fa>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a46      	ldr	r2, [pc, #280]	; (8001180 <HAL_GPIO_Init+0x2fc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x1f6>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a45      	ldr	r2, [pc, #276]	; (8001184 <HAL_GPIO_Init+0x300>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x1f2>
 8001072:	2304      	movs	r3, #4
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001076:	2307      	movs	r3, #7
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x204>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x204>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001098:	4935      	ldr	r1, [pc, #212]	; (8001170 <HAL_GPIO_Init+0x2ec>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <HAL_GPIO_Init+0x304>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ca:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <HAL_GPIO_Init+0x304>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_GPIO_Init+0x304>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f4:	4a24      	ldr	r2, [pc, #144]	; (8001188 <HAL_GPIO_Init+0x304>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_GPIO_Init+0x304>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_GPIO_Init+0x304>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_GPIO_Init+0x304>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <HAL_GPIO_Init+0x304>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f aea2 	bls.w	8000ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e264      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d075      	beq.n	80012ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011de:	4ba3      	ldr	r3, [pc, #652]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d00c      	beq.n	8001204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ea:	4ba0      	ldr	r3, [pc, #640]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d112      	bne.n	800121c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f6:	4b9d      	ldr	r3, [pc, #628]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001202:	d10b      	bne.n	800121c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	4b99      	ldr	r3, [pc, #612]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d05b      	beq.n	80012c8 <HAL_RCC_OscConfig+0x108>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d157      	bne.n	80012c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e23f      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001224:	d106      	bne.n	8001234 <HAL_RCC_OscConfig+0x74>
 8001226:	4b91      	ldr	r3, [pc, #580]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a90      	ldr	r2, [pc, #576]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e01d      	b.n	8001270 <HAL_RCC_OscConfig+0xb0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x98>
 800123e:	4b8b      	ldr	r3, [pc, #556]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a8a      	ldr	r2, [pc, #552]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a87      	ldr	r2, [pc, #540]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0xb0>
 8001258:	4b84      	ldr	r3, [pc, #528]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a83      	ldr	r2, [pc, #524]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b81      	ldr	r3, [pc, #516]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a80      	ldr	r2, [pc, #512]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800126a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fc30 	bl	8000adc <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fc2c 	bl	8000adc <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e204      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b76      	ldr	r3, [pc, #472]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0xc0>
 800129e:	e014      	b.n	80012ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc1c 	bl	8000adc <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fc18 	bl	8000adc <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e1f0      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	4b6c      	ldr	r3, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0xe8>
 80012c6:	e000      	b.n	80012ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d063      	beq.n	800139e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e2:	4b62      	ldr	r3, [pc, #392]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d11c      	bne.n	8001328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ee:	4b5f      	ldr	r3, [pc, #380]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	4b5c      	ldr	r3, [pc, #368]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_RCC_OscConfig+0x152>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e1c4      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4952      	ldr	r1, [pc, #328]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	e03a      	b.n	800139e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <HAL_RCC_OscConfig+0x2b0>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fbd1 	bl	8000adc <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fbcd 	bl	8000adc <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e1a5      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	4b46      	ldr	r3, [pc, #280]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4940      	ldr	r1, [pc, #256]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
 8001370:	e015      	b.n	800139e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_RCC_OscConfig+0x2b0>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fbb0 	bl	8000adc <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fbac 	bl	8000adc <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e184      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d030      	beq.n	800140c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d016      	beq.n	80013e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_OscConfig+0x2b4>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fb90 	bl	8000adc <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fb8c 	bl	8000adc <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e164      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x200>
 80013de:	e015      	b.n	800140c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x2b4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fb79 	bl	8000adc <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ee:	f7ff fb75 	bl	8000adc <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e14d      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f0      	bne.n	80013ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80a0 	beq.w	800155a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_RCC_OscConfig+0x2ac>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x2b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d121      	bne.n	800149a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_RCC_OscConfig+0x2b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_RCC_OscConfig+0x2b8>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff fb3b 	bl	8000adc <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	e011      	b.n	800148e <HAL_RCC_OscConfig+0x2ce>
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	42470000 	.word	0x42470000
 8001474:	42470e80 	.word	0x42470e80
 8001478:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147c:	f7ff fb2e 	bl	8000adc <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e106      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	4b85      	ldr	r3, [pc, #532]	; (80016a4 <HAL_RCC_OscConfig+0x4e4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2f0>
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6713      	str	r3, [r2, #112]	; 0x70
 80014ae:	e01c      	b.n	80014ea <HAL_RCC_OscConfig+0x32a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x312>
 80014b8:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a7a      	ldr	r2, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	; 0x70
 80014d0:	e00b      	b.n	80014ea <HAL_RCC_OscConfig+0x32a>
 80014d2:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d6:	4a74      	ldr	r2, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	4a71      	ldr	r2, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d015      	beq.n	800151e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f2:	f7ff faf3 	bl	8000adc <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff faef 	bl	8000adc <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e0c5      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ee      	beq.n	80014fa <HAL_RCC_OscConfig+0x33a>
 800151c:	e014      	b.n	8001548 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fadd 	bl	8000adc <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fad9 	bl	8000adc <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0af      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ee      	bne.n	8001526 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 809b 	beq.w	800169a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d05c      	beq.n	800162a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d141      	bne.n	80015fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <HAL_RCC_OscConfig+0x4ec>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff faad 	bl	8000adc <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff faa9 	bl	8000adc <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e081      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001598:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69da      	ldr	r2, [r3, #28]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	019b      	lsls	r3, r3, #6
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	3b01      	subs	r3, #1
 80015be:	041b      	lsls	r3, r3, #16
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	061b      	lsls	r3, r3, #24
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_RCC_OscConfig+0x4ec>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fa82 	bl	8000adc <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fa7e 	bl	8000adc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e056      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x41c>
 80015fa:	e04e      	b.n	800169a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_RCC_OscConfig+0x4ec>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fa6b 	bl	8000adc <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fa67 	bl	8000adc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e03f      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x44a>
 8001628:	e037      	b.n	800169a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e032      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_RCC_OscConfig+0x4e8>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d028      	beq.n	8001696 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d121      	bne.n	8001696 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d11a      	bne.n	8001696 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001666:	4013      	ands	r3, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800166c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166e:	4293      	cmp	r3, r2
 8001670:	d111      	bne.n	8001696 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40007000 	.word	0x40007000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	42470060 	.word	0x42470060

080016b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0cc      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d90c      	bls.n	80016ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b8      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	494d      	ldr	r1, [pc, #308]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d044      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d119      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d003      	beq.n	800176e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	2b03      	cmp	r3, #3
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e067      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 0203 	bic.w	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4934      	ldr	r1, [pc, #208]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a0:	f7ff f99c 	bl	8000adc <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	e00a      	b.n	80017be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff f998 	bl	8000adc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e04f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 020c 	and.w	r2, r3, #12
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d1eb      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d20c      	bcs.n	80017f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e032      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001836:	f000 f821 	bl	800187c <HAL_RCC_GetSysClockFreq>
 800183a:	4602      	mov	r2, r0
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	490a      	ldr	r1, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	5ccb      	ldrb	r3, [r1, r3]
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f8fc 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00
 800186c:	40023800 	.word	0x40023800
 8001870:	080032fc 	.word	0x080032fc
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001882:	2100      	movs	r1, #0
 8001884:	6079      	str	r1, [r7, #4]
 8001886:	2100      	movs	r1, #0
 8001888:	60f9      	str	r1, [r7, #12]
 800188a:	2100      	movs	r1, #0
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800188e:	2100      	movs	r1, #0
 8001890:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001892:	4952      	ldr	r1, [pc, #328]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 8001894:	6889      	ldr	r1, [r1, #8]
 8001896:	f001 010c 	and.w	r1, r1, #12
 800189a:	2908      	cmp	r1, #8
 800189c:	d00d      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x3e>
 800189e:	2908      	cmp	r1, #8
 80018a0:	f200 8094 	bhi.w	80019cc <HAL_RCC_GetSysClockFreq+0x150>
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d002      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x32>
 80018a8:	2904      	cmp	r1, #4
 80018aa:	d003      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x38>
 80018ac:	e08e      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ae:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80018b0:	60bb      	str	r3, [r7, #8]
       break;
 80018b2:	e08e      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80018b6:	60bb      	str	r3, [r7, #8]
      break;
 80018b8:	e08b      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ba:	4948      	ldr	r1, [pc, #288]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018bc:	6849      	ldr	r1, [r1, #4]
 80018be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80018c2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c4:	4945      	ldr	r1, [pc, #276]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018c6:	6849      	ldr	r1, [r1, #4]
 80018c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018cc:	2900      	cmp	r1, #0
 80018ce:	d024      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d0:	4942      	ldr	r1, [pc, #264]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018d2:	6849      	ldr	r1, [r1, #4]
 80018d4:	0989      	lsrs	r1, r1, #6
 80018d6:	4608      	mov	r0, r1
 80018d8:	f04f 0100 	mov.w	r1, #0
 80018dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018e0:	f04f 0500 	mov.w	r5, #0
 80018e4:	ea00 0204 	and.w	r2, r0, r4
 80018e8:	ea01 0305 	and.w	r3, r1, r5
 80018ec:	493d      	ldr	r1, [pc, #244]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80018ee:	fb01 f003 	mul.w	r0, r1, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	fb01 f102 	mul.w	r1, r1, r2
 80018f8:	1844      	adds	r4, r0, r1
 80018fa:	493a      	ldr	r1, [pc, #232]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80018fc:	fba2 0101 	umull	r0, r1, r2, r1
 8001900:	1863      	adds	r3, r4, r1
 8001902:	4619      	mov	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f7fe fcc0 	bl	8000290 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e04a      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	461a      	mov	r2, r3
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	ea02 0400 	and.w	r4, r2, r0
 8001932:	ea03 0501 	and.w	r5, r3, r1
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	014b      	lsls	r3, r1, #5
 8001944:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001948:	0142      	lsls	r2, r0, #5
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	1b00      	subs	r0, r0, r4
 8001950:	eb61 0105 	sbc.w	r1, r1, r5
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	018b      	lsls	r3, r1, #6
 800195e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001962:	0182      	lsls	r2, r0, #6
 8001964:	1a12      	subs	r2, r2, r0
 8001966:	eb63 0301 	sbc.w	r3, r3, r1
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	00d9      	lsls	r1, r3, #3
 8001974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001978:	00d0      	lsls	r0, r2, #3
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	1912      	adds	r2, r2, r4
 8001980:	eb45 0303 	adc.w	r3, r5, r3
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0299      	lsls	r1, r3, #10
 800198e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001992:	0290      	lsls	r0, r2, #10
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f7fe fc74 	bl	8000290 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	3301      	adds	r3, #1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	60bb      	str	r3, [r7, #8]
      break;
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80019ce:	60bb      	str	r3, [r7, #8]
      break;
 80019d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d2:	68bb      	ldr	r3, [r7, #8]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bdb0      	pop	{r4, r5, r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	017d7840 	.word	0x017d7840

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	0800330c 	.word	0x0800330c

08001a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a2c:	f7ff ffdc 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0b5b      	lsrs	r3, r3, #13
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4903      	ldr	r1, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	0800330c 	.word	0x0800330c

08001a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e03f      	b.n	8001ae2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fed4 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fd7b 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	af02      	add	r7, sp, #8
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d17c      	bne.n	8001c04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_UART_Transmit+0x2c>
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e075      	b.n	8001c06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_UART_Transmit+0x3e>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e06e      	b.n	8001c06 <HAL_UART_Transmit+0x11c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2221      	movs	r2, #33	; 0x21
 8001b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b3e:	f7fe ffcd 	bl	8000adc <HAL_GetTick>
 8001b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b58:	d108      	bne.n	8001b6c <HAL_UART_Transmit+0x82>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d104      	bne.n	8001b6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	e003      	b.n	8001b74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b7c:	e02a      	b.n	8001bd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 faf9 	bl	8002180 <UART_WaitOnFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e036      	b.n	8001c06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	e007      	b.n	8001bc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1cf      	bne.n	8001b7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2200      	movs	r2, #0
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fac9 	bl	8002180 <UART_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0ba      	sub	sp, #232	; 0xe8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_UART_IRQHandler+0x66>
 8001c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fbd3 	bl	800241a <UART_Receive_IT>
      return;
 8001c74:	e256      	b.n	8002124 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80de 	beq.w	8001e3c <HAL_UART_IRQHandler+0x22c>
 8001c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80d1 	beq.w	8001e3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_UART_IRQHandler+0xae>
 8001ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xd2>
 8001cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_UART_IRQHandler+0xf6>
 8001cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f043 0204 	orr.w	r2, r3, #4
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d011      	beq.n	8001d36 <HAL_UART_IRQHandler+0x126>
 8001d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f043 0208 	orr.w	r2, r3, #8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 81ed 	beq.w	800211a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_UART_IRQHandler+0x14e>
 8001d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fb5e 	bl	800241a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_UART_IRQHandler+0x17a>
 8001d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04f      	beq.n	8001e2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa66 	bl	800225c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	d141      	bne.n	8001e22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3314      	adds	r3, #20
 8001da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dac:	e853 3f00 	ldrex	r3, [r3]
 8001db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001dca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001dda:	e841 2300 	strex	r3, r2, [r1]
 8001dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1d9      	bne.n	8001d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d013      	beq.n	8001e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	4a7d      	ldr	r2, [pc, #500]	; (8001fec <HAL_UART_IRQHandler+0x3dc>)
 8001df8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f81d 	bl	8000e3e <HAL_DMA_Abort_IT>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d016      	beq.n	8001e38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e14:	4610      	mov	r0, r2
 8001e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e18:	e00e      	b.n	8001e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f99a 	bl	8002154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e20:	e00a      	b.n	8001e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f996 	bl	8002154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e28:	e006      	b.n	8001e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f992 	bl	8002154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001e36:	e170      	b.n	800211a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e38:	bf00      	nop
    return;
 8001e3a:	e16e      	b.n	800211a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 814a 	bne.w	80020da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8143 	beq.w	80020da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 813c 	beq.w	80020da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	f040 80b4 	bne.w	8001ff0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 8140 	beq.w	800211e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	f080 8139 	bcs.w	800211e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001eb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebe:	f000 8088 	beq.w	8001fd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	330c      	adds	r3, #12
 8001ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001efe:	e841 2300 	strex	r3, r2, [r1]
 8001f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1d9      	bne.n	8001ec2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3314      	adds	r3, #20
 8001f14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f18:	e853 3f00 	ldrex	r3, [r3]
 8001f1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3314      	adds	r3, #20
 8001f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001f36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f3e:	e841 2300 	strex	r3, r2, [r1]
 8001f42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1e1      	bne.n	8001f0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3314      	adds	r3, #20
 8001f50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f54:	e853 3f00 	ldrex	r3, [r3]
 8001f58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3314      	adds	r3, #20
 8001f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f76:	e841 2300 	strex	r3, r2, [r1]
 8001f7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e3      	bne.n	8001f4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	330c      	adds	r3, #12
 8001f96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9a:	e853 3f00 	ldrex	r3, [r3]
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa2:	f023 0310 	bic.w	r3, r3, #16
 8001fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fbc:	e841 2300 	strex	r3, r2, [r1]
 8001fc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e3      	bne.n	8001f90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fec6 	bl	8000d5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8c0 	bl	8002168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fe8:	e099      	b.n	800211e <HAL_UART_IRQHandler+0x50e>
 8001fea:	bf00      	nop
 8001fec:	08002323 	.word	0x08002323
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 808b 	beq.w	8002122 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800200c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8086 	beq.w	8002122 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	330c      	adds	r3, #12
 800201c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002020:	e853 3f00 	ldrex	r3, [r3]
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800202c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800203a:	647a      	str	r2, [r7, #68]	; 0x44
 800203c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002042:	e841 2300 	strex	r3, r2, [r1]
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1e3      	bne.n	8002016 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3314      	adds	r3, #20
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	e853 3f00 	ldrex	r3, [r3]
 800205c:	623b      	str	r3, [r7, #32]
   return(result);
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3314      	adds	r3, #20
 800206e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002072:	633a      	str	r2, [r7, #48]	; 0x30
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800207a:	e841 2300 	strex	r3, r2, [r1]
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1e3      	bne.n	800204e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	330c      	adds	r3, #12
 800209a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	e853 3f00 	ldrex	r3, [r3]
 80020a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0310 	bic.w	r3, r3, #16
 80020aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80020b8:	61fa      	str	r2, [r7, #28]
 80020ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020bc:	69b9      	ldr	r1, [r7, #24]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	e841 2300 	strex	r3, r2, [r1]
 80020c4:	617b      	str	r3, [r7, #20]
   return(result);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e3      	bne.n	8002094 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f848 	bl	8002168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020d8:	e023      	b.n	8002122 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_UART_IRQHandler+0x4ea>
 80020e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f929 	bl	800234a <UART_Transmit_IT>
    return;
 80020f8:	e014      	b.n	8002124 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <HAL_UART_IRQHandler+0x514>
 8002106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f969 	bl	80023ea <UART_EndTransmit_IT>
    return;
 8002118:	e004      	b.n	8002124 <HAL_UART_IRQHandler+0x514>
    return;
 800211a:	bf00      	nop
 800211c:	e002      	b.n	8002124 <HAL_UART_IRQHandler+0x514>
      return;
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <HAL_UART_IRQHandler+0x514>
      return;
 8002122:	bf00      	nop
  }
}
 8002124:	37e8      	adds	r7, #232	; 0xe8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop

0800212c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b090      	sub	sp, #64	; 0x40
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002190:	e050      	b.n	8002234 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d04c      	beq.n	8002234 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800219a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80021a0:	f7fe fc9c 	bl	8000adc <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d241      	bcs.n	8002234 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	330c      	adds	r3, #12
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	e853 3f00 	ldrex	r3, [r3]
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021d0:	637a      	str	r2, [r7, #52]	; 0x34
 80021d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d8:	e841 2300 	strex	r3, r2, [r1]
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e5      	bne.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3314      	adds	r3, #20
 80021ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	613b      	str	r3, [r7, #16]
   return(result);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3314      	adds	r3, #20
 8002202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002204:	623a      	str	r2, [r7, #32]
 8002206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002208:	69f9      	ldr	r1, [r7, #28]
 800220a:	6a3a      	ldr	r2, [r7, #32]
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	61bb      	str	r3, [r7, #24]
   return(result);
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e5      	bne.n	80021e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e00f      	b.n	8002254 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	429a      	cmp	r2, r3
 8002250:	d09f      	beq.n	8002192 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3740      	adds	r7, #64	; 0x40
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800225c:	b480      	push	{r7}
 800225e:	b095      	sub	sp, #84	; 0x54
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	330c      	adds	r3, #12
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	e853 3f00 	ldrex	r3, [r3]
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800227a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	330c      	adds	r3, #12
 8002282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002284:	643a      	str	r2, [r7, #64]	; 0x40
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800228a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800228c:	e841 2300 	strex	r3, r2, [r1]
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e5      	bne.n	8002264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3314      	adds	r3, #20
 800229e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	e853 3f00 	ldrex	r3, [r3]
 80022a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3314      	adds	r3, #20
 80022b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c0:	e841 2300 	strex	r3, r2, [r1]
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e5      	bne.n	8002298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d119      	bne.n	8002308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	e853 3f00 	ldrex	r3, [r3]
 80022e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f023 0310 	bic.w	r3, r3, #16
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022f4:	61ba      	str	r2, [r7, #24]
 80022f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	e841 2300 	strex	r3, r2, [r1]
 8002300:	613b      	str	r3, [r7, #16]
   return(result);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e5      	bne.n	80022d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002316:	bf00      	nop
 8002318:	3754      	adds	r7, #84	; 0x54
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f7ff ff09 	bl	8002154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b21      	cmp	r3, #33	; 0x21
 800235c:	d13e      	bne.n	80023dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002366:	d114      	bne.n	8002392 <UART_Transmit_IT+0x48>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d110      	bne.n	8002392 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	1c9a      	adds	r2, r3, #2
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	e008      	b.n	80023a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	1c59      	adds	r1, r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6211      	str	r1, [r2, #32]
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4619      	mov	r1, r3
 80023b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	e000      	b.n	80023de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
  }
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fe8e 	bl	800212c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b08c      	sub	sp, #48	; 0x30
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b22      	cmp	r3, #34	; 0x22
 800242c:	f040 80ab 	bne.w	8002586 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002438:	d117      	bne.n	800246a <UART_Receive_IT+0x50>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	b29b      	uxth	r3, r3
 8002454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002458:	b29a      	uxth	r2, r3
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	1c9a      	adds	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
 8002468:	e026      	b.n	80024b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d007      	beq.n	800248e <UART_Receive_IT+0x74>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <UART_Receive_IT+0x82>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e008      	b.n	80024ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d15a      	bne.n	8002582 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0220 	bic.w	r2, r2, #32
 80024da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b01      	cmp	r3, #1
 800250a:	d135      	bne.n	8002578 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	e853 3f00 	ldrex	r3, [r3]
 8002520:	613b      	str	r3, [r7, #16]
   return(result);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f023 0310 	bic.w	r3, r3, #16
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	623a      	str	r2, [r7, #32]
 8002534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	69f9      	ldr	r1, [r7, #28]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e5      	bne.n	8002512 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d10a      	bne.n	800256a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff fdf9 	bl	8002168 <HAL_UARTEx_RxEventCallback>
 8002576:	e002      	b.n	800257e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fde1 	bl	8002140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e002      	b.n	8002588 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
  }
}
 8002588:	4618      	mov	r0, r3
 800258a:	3730      	adds	r7, #48	; 0x30
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002594:	b09f      	sub	sp, #124	; 0x7c
 8002596:	af00      	add	r7, sp, #0
 8002598:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a6:	68d9      	ldr	r1, [r3, #12]
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	ea40 0301 	orr.w	r3, r0, r1
 80025b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80025ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025d4:	f021 010c 	bic.w	r1, r1, #12
 80025d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025de:	430b      	orrs	r3, r1
 80025e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ee:	6999      	ldr	r1, [r3, #24]
 80025f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	ea40 0301 	orr.w	r3, r0, r1
 80025f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4bc5      	ldr	r3, [pc, #788]	; (8002914 <UART_SetConfig+0x384>)
 8002600:	429a      	cmp	r2, r3
 8002602:	d004      	beq.n	800260e <UART_SetConfig+0x7e>
 8002604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4bc3      	ldr	r3, [pc, #780]	; (8002918 <UART_SetConfig+0x388>)
 800260a:	429a      	cmp	r2, r3
 800260c:	d103      	bne.n	8002616 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800260e:	f7ff fa0b 	bl	8001a28 <HAL_RCC_GetPCLK2Freq>
 8002612:	6778      	str	r0, [r7, #116]	; 0x74
 8002614:	e002      	b.n	800261c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002616:	f7ff f9f3 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 800261a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002624:	f040 80b6 	bne.w	8002794 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262a:	461c      	mov	r4, r3
 800262c:	f04f 0500 	mov.w	r5, #0
 8002630:	4622      	mov	r2, r4
 8002632:	462b      	mov	r3, r5
 8002634:	1891      	adds	r1, r2, r2
 8002636:	6439      	str	r1, [r7, #64]	; 0x40
 8002638:	415b      	adcs	r3, r3
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
 800263c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002640:	1912      	adds	r2, r2, r4
 8002642:	eb45 0303 	adc.w	r3, r5, r3
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	00d9      	lsls	r1, r3, #3
 8002650:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002654:	00d0      	lsls	r0, r2, #3
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	1911      	adds	r1, r2, r4
 800265c:	6639      	str	r1, [r7, #96]	; 0x60
 800265e:	416b      	adcs	r3, r5
 8002660:	667b      	str	r3, [r7, #100]	; 0x64
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	1891      	adds	r1, r2, r2
 800266e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002670:	415b      	adcs	r3, r3
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002678:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800267c:	f7fd fe08 	bl	8000290 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4ba5      	ldr	r3, [pc, #660]	; (800291c <UART_SetConfig+0x38c>)
 8002686:	fba3 2302 	umull	r2, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	011e      	lsls	r6, r3, #4
 800268e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002690:	461c      	mov	r4, r3
 8002692:	f04f 0500 	mov.w	r5, #0
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	1891      	adds	r1, r2, r2
 800269c:	6339      	str	r1, [r7, #48]	; 0x30
 800269e:	415b      	adcs	r3, r3
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
 80026a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026a6:	1912      	adds	r2, r2, r4
 80026a8:	eb45 0303 	adc.w	r3, r5, r3
 80026ac:	f04f 0000 	mov.w	r0, #0
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	00d9      	lsls	r1, r3, #3
 80026b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ba:	00d0      	lsls	r0, r2, #3
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	1911      	adds	r1, r2, r4
 80026c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80026c4:	416b      	adcs	r3, r5
 80026c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	1891      	adds	r1, r2, r2
 80026d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80026d6:	415b      	adcs	r3, r3
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026e2:	f7fd fdd5 	bl	8000290 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4b8c      	ldr	r3, [pc, #560]	; (800291c <UART_SetConfig+0x38c>)
 80026ec:	fba3 1302 	umull	r1, r3, r3, r2
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	2164      	movs	r1, #100	; 0x64
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	3332      	adds	r3, #50	; 0x32
 80026fe:	4a87      	ldr	r2, [pc, #540]	; (800291c <UART_SetConfig+0x38c>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800270c:	441e      	add	r6, r3
 800270e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002710:	4618      	mov	r0, r3
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	1894      	adds	r4, r2, r2
 800271c:	623c      	str	r4, [r7, #32]
 800271e:	415b      	adcs	r3, r3
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002726:	1812      	adds	r2, r2, r0
 8002728:	eb41 0303 	adc.w	r3, r1, r3
 800272c:	f04f 0400 	mov.w	r4, #0
 8002730:	f04f 0500 	mov.w	r5, #0
 8002734:	00dd      	lsls	r5, r3, #3
 8002736:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800273a:	00d4      	lsls	r4, r2, #3
 800273c:	4622      	mov	r2, r4
 800273e:	462b      	mov	r3, r5
 8002740:	1814      	adds	r4, r2, r0
 8002742:	653c      	str	r4, [r7, #80]	; 0x50
 8002744:	414b      	adcs	r3, r1
 8002746:	657b      	str	r3, [r7, #84]	; 0x54
 8002748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	461a      	mov	r2, r3
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	1891      	adds	r1, r2, r2
 8002754:	61b9      	str	r1, [r7, #24]
 8002756:	415b      	adcs	r3, r3
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800275e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002762:	f7fd fd95 	bl	8000290 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4b6c      	ldr	r3, [pc, #432]	; (800291c <UART_SetConfig+0x38c>)
 800276c:	fba3 1302 	umull	r1, r3, r3, r2
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	2164      	movs	r1, #100	; 0x64
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	3332      	adds	r3, #50	; 0x32
 800277e:	4a67      	ldr	r2, [pc, #412]	; (800291c <UART_SetConfig+0x38c>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	f003 0207 	and.w	r2, r3, #7
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4432      	add	r2, r6
 8002790:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002792:	e0b9      	b.n	8002908 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002796:	461c      	mov	r4, r3
 8002798:	f04f 0500 	mov.w	r5, #0
 800279c:	4622      	mov	r2, r4
 800279e:	462b      	mov	r3, r5
 80027a0:	1891      	adds	r1, r2, r2
 80027a2:	6139      	str	r1, [r7, #16]
 80027a4:	415b      	adcs	r3, r3
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027ac:	1912      	adds	r2, r2, r4
 80027ae:	eb45 0303 	adc.w	r3, r5, r3
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	00d9      	lsls	r1, r3, #3
 80027bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027c0:	00d0      	lsls	r0, r2, #3
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	eb12 0804 	adds.w	r8, r2, r4
 80027ca:	eb43 0905 	adc.w	r9, r3, r5
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f04f 0100 	mov.w	r1, #0
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	008b      	lsls	r3, r1, #2
 80027e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027e6:	0082      	lsls	r2, r0, #2
 80027e8:	4640      	mov	r0, r8
 80027ea:	4649      	mov	r1, r9
 80027ec:	f7fd fd50 	bl	8000290 <__aeabi_uldivmod>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4b49      	ldr	r3, [pc, #292]	; (800291c <UART_SetConfig+0x38c>)
 80027f6:	fba3 2302 	umull	r2, r3, r3, r2
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	011e      	lsls	r6, r3, #4
 80027fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002800:	4618      	mov	r0, r3
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	1894      	adds	r4, r2, r2
 800280c:	60bc      	str	r4, [r7, #8]
 800280e:	415b      	adcs	r3, r3
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002816:	1812      	adds	r2, r2, r0
 8002818:	eb41 0303 	adc.w	r3, r1, r3
 800281c:	f04f 0400 	mov.w	r4, #0
 8002820:	f04f 0500 	mov.w	r5, #0
 8002824:	00dd      	lsls	r5, r3, #3
 8002826:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800282a:	00d4      	lsls	r4, r2, #3
 800282c:	4622      	mov	r2, r4
 800282e:	462b      	mov	r3, r5
 8002830:	1814      	adds	r4, r2, r0
 8002832:	64bc      	str	r4, [r7, #72]	; 0x48
 8002834:	414b      	adcs	r3, r1
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	008b      	lsls	r3, r1, #2
 800284c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002850:	0082      	lsls	r2, r0, #2
 8002852:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002856:	f7fd fd1b 	bl	8000290 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <UART_SetConfig+0x38c>)
 8002860:	fba3 1302 	umull	r1, r3, r3, r2
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	3332      	adds	r3, #50	; 0x32
 8002872:	4a2a      	ldr	r2, [pc, #168]	; (800291c <UART_SetConfig+0x38c>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287e:	441e      	add	r6, r3
 8002880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002882:	4618      	mov	r0, r3
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	1894      	adds	r4, r2, r2
 800288e:	603c      	str	r4, [r7, #0]
 8002890:	415b      	adcs	r3, r3
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002898:	1812      	adds	r2, r2, r0
 800289a:	eb41 0303 	adc.w	r3, r1, r3
 800289e:	f04f 0400 	mov.w	r4, #0
 80028a2:	f04f 0500 	mov.w	r5, #0
 80028a6:	00dd      	lsls	r5, r3, #3
 80028a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028ac:	00d4      	lsls	r4, r2, #3
 80028ae:	4622      	mov	r2, r4
 80028b0:	462b      	mov	r3, r5
 80028b2:	eb12 0a00 	adds.w	sl, r2, r0
 80028b6:	eb43 0b01 	adc.w	fp, r3, r1
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	008b      	lsls	r3, r1, #2
 80028ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028d2:	0082      	lsls	r2, r0, #2
 80028d4:	4650      	mov	r0, sl
 80028d6:	4659      	mov	r1, fp
 80028d8:	f7fd fcda 	bl	8000290 <__aeabi_uldivmod>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <UART_SetConfig+0x38c>)
 80028e2:	fba3 1302 	umull	r1, r3, r3, r2
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2164      	movs	r1, #100	; 0x64
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	3332      	adds	r3, #50	; 0x32
 80028f4:	4a09      	ldr	r2, [pc, #36]	; (800291c <UART_SetConfig+0x38c>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	f003 020f 	and.w	r2, r3, #15
 8002900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4432      	add	r2, r6
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	377c      	adds	r7, #124	; 0x7c
 800290c:	46bd      	mov	sp, r7
 800290e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002912:	bf00      	nop
 8002914:	40011000 	.word	0x40011000
 8002918:	40011400 	.word	0x40011400
 800291c:	51eb851f 	.word	0x51eb851f

08002920 <ESP8266_Init>:
#include "mqtt.h"



void ESP8266_Init(UART_HandleTypeDef *_huart)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	ESP8266_Uart_t=_huart;
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <ESP8266_Init+0x1c>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6013      	str	r3, [r2, #0]


}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	200000dc 	.word	0x200000dc

08002940 <ESP8266_Uart>:
	MQTT_TypeStructure->Level = 0x04;
	MQTT_TypeStructure->Flag = MQTT_Init-> Flag;
}

HAL_StatusTypeDef ESP8266_Uart(char * const pData)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	uint16_t Size = (uint16_t) strlen(pData);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fd fc49 	bl	80001e0 <strlen>
 800294e:	4603      	mov	r3, r0
 8002950:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef returnStatement = HAL_UART_Transmit(ESP8266_Uart_t, (uint8_t*) pData, Size, HAL_MAX_DELAY);
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <ESP8266_Uart+0x30>)
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	89fa      	ldrh	r2, [r7, #14]
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	f7ff f8c4 	bl	8001aea <HAL_UART_Transmit>
 8002962:	4603      	mov	r3, r0
 8002964:	737b      	strb	r3, [r7, #13]

	return returnStatement;
 8002966:	7b7b      	ldrb	r3, [r7, #13]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200000dc 	.word	0x200000dc

08002974 <Wifi_Connect>:

void Wifi_Connect(char *SSID, char *pwd)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b090      	sub	sp, #64	; 0x40
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]

	uint8_t tmpBuffer[50];
	uint8_t tmpSize = (uint8_t) sprintf(tmpBuffer,"AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, pwd);
 800297e:	f107 000c 	add.w	r0, r7, #12
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4910      	ldr	r1, [pc, #64]	; (80029c8 <Wifi_Connect+0x54>)
 8002988:	f000 f910 	bl	8002bac <siprintf>
 800298c:	4603      	mov	r3, r0
 800298e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	UNUSED(tmpSize);

	ESP8266_Uart(CWMODE);
 8002992:	480e      	ldr	r0, [pc, #56]	; (80029cc <Wifi_Connect+0x58>)
 8002994:	f7ff ffd4 	bl	8002940 <ESP8266_Uart>
	HAL_Delay(1000);
 8002998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299c:	f7fe f8aa 	bl	8000af4 <HAL_Delay>
	ESP8266_Uart(CWQAP);
 80029a0:	480b      	ldr	r0, [pc, #44]	; (80029d0 <Wifi_Connect+0x5c>)
 80029a2:	f7ff ffcd 	bl	8002940 <ESP8266_Uart>
	HAL_Delay(1000);
 80029a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029aa:	f7fe f8a3 	bl	8000af4 <HAL_Delay>
	ESP8266_Uart(tmpBuffer);
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ffc4 	bl	8002940 <ESP8266_Uart>
	HAL_Delay(5000);
 80029b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80029bc:	f7fe f89a 	bl	8000af4 <HAL_Delay>

}
 80029c0:	bf00      	nop
 80029c2:	3740      	adds	r7, #64	; 0x40
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	080032c8 	.word	0x080032c8
 80029cc:	080032e0 	.word	0x080032e0
 80029d0:	080032f0 	.word	0x080032f0

080029d4 <__errno>:
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <__errno+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000000c 	.word	0x2000000c

080029e0 <__libc_init_array>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4d0d      	ldr	r5, [pc, #52]	; (8002a18 <__libc_init_array+0x38>)
 80029e4:	4c0d      	ldr	r4, [pc, #52]	; (8002a1c <__libc_init_array+0x3c>)
 80029e6:	1b64      	subs	r4, r4, r5
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	2600      	movs	r6, #0
 80029ec:	42a6      	cmp	r6, r4
 80029ee:	d109      	bne.n	8002a04 <__libc_init_array+0x24>
 80029f0:	4d0b      	ldr	r5, [pc, #44]	; (8002a20 <__libc_init_array+0x40>)
 80029f2:	4c0c      	ldr	r4, [pc, #48]	; (8002a24 <__libc_init_array+0x44>)
 80029f4:	f000 fc4e 	bl	8003294 <_init>
 80029f8:	1b64      	subs	r4, r4, r5
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	2600      	movs	r6, #0
 80029fe:	42a6      	cmp	r6, r4
 8002a00:	d105      	bne.n	8002a0e <__libc_init_array+0x2e>
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
 8002a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a08:	4798      	blx	r3
 8002a0a:	3601      	adds	r6, #1
 8002a0c:	e7ee      	b.n	80029ec <__libc_init_array+0xc>
 8002a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a12:	4798      	blx	r3
 8002a14:	3601      	adds	r6, #1
 8002a16:	e7f2      	b.n	80029fe <__libc_init_array+0x1e>
 8002a18:	08003350 	.word	0x08003350
 8002a1c:	08003350 	.word	0x08003350
 8002a20:	08003350 	.word	0x08003350
 8002a24:	08003354 	.word	0x08003354

08002a28 <memset>:
 8002a28:	4402      	add	r2, r0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d100      	bne.n	8002a32 <memset+0xa>
 8002a30:	4770      	bx	lr
 8002a32:	f803 1b01 	strb.w	r1, [r3], #1
 8002a36:	e7f9      	b.n	8002a2c <memset+0x4>

08002a38 <_free_r>:
 8002a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a3a:	2900      	cmp	r1, #0
 8002a3c:	d048      	beq.n	8002ad0 <_free_r+0x98>
 8002a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a42:	9001      	str	r0, [sp, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f1a1 0404 	sub.w	r4, r1, #4
 8002a4a:	bfb8      	it	lt
 8002a4c:	18e4      	addlt	r4, r4, r3
 8002a4e:	f000 f8cd 	bl	8002bec <__malloc_lock>
 8002a52:	4a20      	ldr	r2, [pc, #128]	; (8002ad4 <_free_r+0x9c>)
 8002a54:	9801      	ldr	r0, [sp, #4]
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	4615      	mov	r5, r2
 8002a5a:	b933      	cbnz	r3, 8002a6a <_free_r+0x32>
 8002a5c:	6063      	str	r3, [r4, #4]
 8002a5e:	6014      	str	r4, [r2, #0]
 8002a60:	b003      	add	sp, #12
 8002a62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a66:	f000 b8c7 	b.w	8002bf8 <__malloc_unlock>
 8002a6a:	42a3      	cmp	r3, r4
 8002a6c:	d90b      	bls.n	8002a86 <_free_r+0x4e>
 8002a6e:	6821      	ldr	r1, [r4, #0]
 8002a70:	1862      	adds	r2, r4, r1
 8002a72:	4293      	cmp	r3, r2
 8002a74:	bf04      	itt	eq
 8002a76:	681a      	ldreq	r2, [r3, #0]
 8002a78:	685b      	ldreq	r3, [r3, #4]
 8002a7a:	6063      	str	r3, [r4, #4]
 8002a7c:	bf04      	itt	eq
 8002a7e:	1852      	addeq	r2, r2, r1
 8002a80:	6022      	streq	r2, [r4, #0]
 8002a82:	602c      	str	r4, [r5, #0]
 8002a84:	e7ec      	b.n	8002a60 <_free_r+0x28>
 8002a86:	461a      	mov	r2, r3
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	b10b      	cbz	r3, 8002a90 <_free_r+0x58>
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	d9fa      	bls.n	8002a86 <_free_r+0x4e>
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	1855      	adds	r5, r2, r1
 8002a94:	42a5      	cmp	r5, r4
 8002a96:	d10b      	bne.n	8002ab0 <_free_r+0x78>
 8002a98:	6824      	ldr	r4, [r4, #0]
 8002a9a:	4421      	add	r1, r4
 8002a9c:	1854      	adds	r4, r2, r1
 8002a9e:	42a3      	cmp	r3, r4
 8002aa0:	6011      	str	r1, [r2, #0]
 8002aa2:	d1dd      	bne.n	8002a60 <_free_r+0x28>
 8002aa4:	681c      	ldr	r4, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	6053      	str	r3, [r2, #4]
 8002aaa:	4421      	add	r1, r4
 8002aac:	6011      	str	r1, [r2, #0]
 8002aae:	e7d7      	b.n	8002a60 <_free_r+0x28>
 8002ab0:	d902      	bls.n	8002ab8 <_free_r+0x80>
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	6003      	str	r3, [r0, #0]
 8002ab6:	e7d3      	b.n	8002a60 <_free_r+0x28>
 8002ab8:	6825      	ldr	r5, [r4, #0]
 8002aba:	1961      	adds	r1, r4, r5
 8002abc:	428b      	cmp	r3, r1
 8002abe:	bf04      	itt	eq
 8002ac0:	6819      	ldreq	r1, [r3, #0]
 8002ac2:	685b      	ldreq	r3, [r3, #4]
 8002ac4:	6063      	str	r3, [r4, #4]
 8002ac6:	bf04      	itt	eq
 8002ac8:	1949      	addeq	r1, r1, r5
 8002aca:	6021      	streq	r1, [r4, #0]
 8002acc:	6054      	str	r4, [r2, #4]
 8002ace:	e7c7      	b.n	8002a60 <_free_r+0x28>
 8002ad0:	b003      	add	sp, #12
 8002ad2:	bd30      	pop	{r4, r5, pc}
 8002ad4:	20000090 	.word	0x20000090

08002ad8 <_malloc_r>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	1ccd      	adds	r5, r1, #3
 8002adc:	f025 0503 	bic.w	r5, r5, #3
 8002ae0:	3508      	adds	r5, #8
 8002ae2:	2d0c      	cmp	r5, #12
 8002ae4:	bf38      	it	cc
 8002ae6:	250c      	movcc	r5, #12
 8002ae8:	2d00      	cmp	r5, #0
 8002aea:	4606      	mov	r6, r0
 8002aec:	db01      	blt.n	8002af2 <_malloc_r+0x1a>
 8002aee:	42a9      	cmp	r1, r5
 8002af0:	d903      	bls.n	8002afa <_malloc_r+0x22>
 8002af2:	230c      	movs	r3, #12
 8002af4:	6033      	str	r3, [r6, #0]
 8002af6:	2000      	movs	r0, #0
 8002af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afa:	f000 f877 	bl	8002bec <__malloc_lock>
 8002afe:	4921      	ldr	r1, [pc, #132]	; (8002b84 <_malloc_r+0xac>)
 8002b00:	680a      	ldr	r2, [r1, #0]
 8002b02:	4614      	mov	r4, r2
 8002b04:	b99c      	cbnz	r4, 8002b2e <_malloc_r+0x56>
 8002b06:	4f20      	ldr	r7, [pc, #128]	; (8002b88 <_malloc_r+0xb0>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b923      	cbnz	r3, 8002b16 <_malloc_r+0x3e>
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f000 f83c 	bl	8002b8c <_sbrk_r>
 8002b14:	6038      	str	r0, [r7, #0]
 8002b16:	4629      	mov	r1, r5
 8002b18:	4630      	mov	r0, r6
 8002b1a:	f000 f837 	bl	8002b8c <_sbrk_r>
 8002b1e:	1c43      	adds	r3, r0, #1
 8002b20:	d123      	bne.n	8002b6a <_malloc_r+0x92>
 8002b22:	230c      	movs	r3, #12
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	4630      	mov	r0, r6
 8002b28:	f000 f866 	bl	8002bf8 <__malloc_unlock>
 8002b2c:	e7e3      	b.n	8002af6 <_malloc_r+0x1e>
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	1b5b      	subs	r3, r3, r5
 8002b32:	d417      	bmi.n	8002b64 <_malloc_r+0x8c>
 8002b34:	2b0b      	cmp	r3, #11
 8002b36:	d903      	bls.n	8002b40 <_malloc_r+0x68>
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	441c      	add	r4, r3
 8002b3c:	6025      	str	r5, [r4, #0]
 8002b3e:	e004      	b.n	8002b4a <_malloc_r+0x72>
 8002b40:	6863      	ldr	r3, [r4, #4]
 8002b42:	42a2      	cmp	r2, r4
 8002b44:	bf0c      	ite	eq
 8002b46:	600b      	streq	r3, [r1, #0]
 8002b48:	6053      	strne	r3, [r2, #4]
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	f000 f854 	bl	8002bf8 <__malloc_unlock>
 8002b50:	f104 000b 	add.w	r0, r4, #11
 8002b54:	1d23      	adds	r3, r4, #4
 8002b56:	f020 0007 	bic.w	r0, r0, #7
 8002b5a:	1ac2      	subs	r2, r0, r3
 8002b5c:	d0cc      	beq.n	8002af8 <_malloc_r+0x20>
 8002b5e:	1a1b      	subs	r3, r3, r0
 8002b60:	50a3      	str	r3, [r4, r2]
 8002b62:	e7c9      	b.n	8002af8 <_malloc_r+0x20>
 8002b64:	4622      	mov	r2, r4
 8002b66:	6864      	ldr	r4, [r4, #4]
 8002b68:	e7cc      	b.n	8002b04 <_malloc_r+0x2c>
 8002b6a:	1cc4      	adds	r4, r0, #3
 8002b6c:	f024 0403 	bic.w	r4, r4, #3
 8002b70:	42a0      	cmp	r0, r4
 8002b72:	d0e3      	beq.n	8002b3c <_malloc_r+0x64>
 8002b74:	1a21      	subs	r1, r4, r0
 8002b76:	4630      	mov	r0, r6
 8002b78:	f000 f808 	bl	8002b8c <_sbrk_r>
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	d1dd      	bne.n	8002b3c <_malloc_r+0x64>
 8002b80:	e7cf      	b.n	8002b22 <_malloc_r+0x4a>
 8002b82:	bf00      	nop
 8002b84:	20000090 	.word	0x20000090
 8002b88:	20000094 	.word	0x20000094

08002b8c <_sbrk_r>:
 8002b8c:	b538      	push	{r3, r4, r5, lr}
 8002b8e:	4d06      	ldr	r5, [pc, #24]	; (8002ba8 <_sbrk_r+0x1c>)
 8002b90:	2300      	movs	r3, #0
 8002b92:	4604      	mov	r4, r0
 8002b94:	4608      	mov	r0, r1
 8002b96:	602b      	str	r3, [r5, #0]
 8002b98:	f7fd fec8 	bl	800092c <_sbrk>
 8002b9c:	1c43      	adds	r3, r0, #1
 8002b9e:	d102      	bne.n	8002ba6 <_sbrk_r+0x1a>
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	b103      	cbz	r3, 8002ba6 <_sbrk_r+0x1a>
 8002ba4:	6023      	str	r3, [r4, #0]
 8002ba6:	bd38      	pop	{r3, r4, r5, pc}
 8002ba8:	200000e4 	.word	0x200000e4

08002bac <siprintf>:
 8002bac:	b40e      	push	{r1, r2, r3}
 8002bae:	b500      	push	{lr}
 8002bb0:	b09c      	sub	sp, #112	; 0x70
 8002bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8002bb4:	9002      	str	r0, [sp, #8]
 8002bb6:	9006      	str	r0, [sp, #24]
 8002bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bbc:	4809      	ldr	r0, [pc, #36]	; (8002be4 <siprintf+0x38>)
 8002bbe:	9107      	str	r1, [sp, #28]
 8002bc0:	9104      	str	r1, [sp, #16]
 8002bc2:	4909      	ldr	r1, [pc, #36]	; (8002be8 <siprintf+0x3c>)
 8002bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bc8:	9105      	str	r1, [sp, #20]
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	a902      	add	r1, sp, #8
 8002bd0:	f000 f874 	bl	8002cbc <_svfiprintf_r>
 8002bd4:	9b02      	ldr	r3, [sp, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	b01c      	add	sp, #112	; 0x70
 8002bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002be0:	b003      	add	sp, #12
 8002be2:	4770      	bx	lr
 8002be4:	2000000c 	.word	0x2000000c
 8002be8:	ffff0208 	.word	0xffff0208

08002bec <__malloc_lock>:
 8002bec:	4801      	ldr	r0, [pc, #4]	; (8002bf4 <__malloc_lock+0x8>)
 8002bee:	f000 baf9 	b.w	80031e4 <__retarget_lock_acquire_recursive>
 8002bf2:	bf00      	nop
 8002bf4:	200000ec 	.word	0x200000ec

08002bf8 <__malloc_unlock>:
 8002bf8:	4801      	ldr	r0, [pc, #4]	; (8002c00 <__malloc_unlock+0x8>)
 8002bfa:	f000 baf4 	b.w	80031e6 <__retarget_lock_release_recursive>
 8002bfe:	bf00      	nop
 8002c00:	200000ec 	.word	0x200000ec

08002c04 <__ssputs_r>:
 8002c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c08:	688e      	ldr	r6, [r1, #8]
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	4682      	mov	sl, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	4690      	mov	r8, r2
 8002c12:	461f      	mov	r7, r3
 8002c14:	d838      	bhi.n	8002c88 <__ssputs_r+0x84>
 8002c16:	898a      	ldrh	r2, [r1, #12]
 8002c18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c1c:	d032      	beq.n	8002c84 <__ssputs_r+0x80>
 8002c1e:	6825      	ldr	r5, [r4, #0]
 8002c20:	6909      	ldr	r1, [r1, #16]
 8002c22:	eba5 0901 	sub.w	r9, r5, r1
 8002c26:	6965      	ldr	r5, [r4, #20]
 8002c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c30:	3301      	adds	r3, #1
 8002c32:	444b      	add	r3, r9
 8002c34:	106d      	asrs	r5, r5, #1
 8002c36:	429d      	cmp	r5, r3
 8002c38:	bf38      	it	cc
 8002c3a:	461d      	movcc	r5, r3
 8002c3c:	0553      	lsls	r3, r2, #21
 8002c3e:	d531      	bpl.n	8002ca4 <__ssputs_r+0xa0>
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7ff ff49 	bl	8002ad8 <_malloc_r>
 8002c46:	4606      	mov	r6, r0
 8002c48:	b950      	cbnz	r0, 8002c60 <__ssputs_r+0x5c>
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	f8ca 3000 	str.w	r3, [sl]
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c56:	81a3      	strh	r3, [r4, #12]
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c60:	6921      	ldr	r1, [r4, #16]
 8002c62:	464a      	mov	r2, r9
 8002c64:	f000 fac0 	bl	80031e8 <memcpy>
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	81a3      	strh	r3, [r4, #12]
 8002c74:	6126      	str	r6, [r4, #16]
 8002c76:	6165      	str	r5, [r4, #20]
 8002c78:	444e      	add	r6, r9
 8002c7a:	eba5 0509 	sub.w	r5, r5, r9
 8002c7e:	6026      	str	r6, [r4, #0]
 8002c80:	60a5      	str	r5, [r4, #8]
 8002c82:	463e      	mov	r6, r7
 8002c84:	42be      	cmp	r6, r7
 8002c86:	d900      	bls.n	8002c8a <__ssputs_r+0x86>
 8002c88:	463e      	mov	r6, r7
 8002c8a:	4632      	mov	r2, r6
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	4641      	mov	r1, r8
 8002c90:	f000 fab8 	bl	8003204 <memmove>
 8002c94:	68a3      	ldr	r3, [r4, #8]
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	1b9b      	subs	r3, r3, r6
 8002c9a:	4432      	add	r2, r6
 8002c9c:	60a3      	str	r3, [r4, #8]
 8002c9e:	6022      	str	r2, [r4, #0]
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	e7db      	b.n	8002c5c <__ssputs_r+0x58>
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	f000 fac7 	bl	8003238 <_realloc_r>
 8002caa:	4606      	mov	r6, r0
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d1e1      	bne.n	8002c74 <__ssputs_r+0x70>
 8002cb0:	6921      	ldr	r1, [r4, #16]
 8002cb2:	4650      	mov	r0, sl
 8002cb4:	f7ff fec0 	bl	8002a38 <_free_r>
 8002cb8:	e7c7      	b.n	8002c4a <__ssputs_r+0x46>
	...

08002cbc <_svfiprintf_r>:
 8002cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc0:	4698      	mov	r8, r3
 8002cc2:	898b      	ldrh	r3, [r1, #12]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	b09d      	sub	sp, #116	; 0x74
 8002cc8:	4607      	mov	r7, r0
 8002cca:	460d      	mov	r5, r1
 8002ccc:	4614      	mov	r4, r2
 8002cce:	d50e      	bpl.n	8002cee <_svfiprintf_r+0x32>
 8002cd0:	690b      	ldr	r3, [r1, #16]
 8002cd2:	b963      	cbnz	r3, 8002cee <_svfiprintf_r+0x32>
 8002cd4:	2140      	movs	r1, #64	; 0x40
 8002cd6:	f7ff feff 	bl	8002ad8 <_malloc_r>
 8002cda:	6028      	str	r0, [r5, #0]
 8002cdc:	6128      	str	r0, [r5, #16]
 8002cde:	b920      	cbnz	r0, 8002cea <_svfiprintf_r+0x2e>
 8002ce0:	230c      	movs	r3, #12
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	e0d1      	b.n	8002e8e <_svfiprintf_r+0x1d2>
 8002cea:	2340      	movs	r3, #64	; 0x40
 8002cec:	616b      	str	r3, [r5, #20]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cfc:	2330      	movs	r3, #48	; 0x30
 8002cfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ea8 <_svfiprintf_r+0x1ec>
 8002d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d06:	f04f 0901 	mov.w	r9, #1
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d12:	b10a      	cbz	r2, 8002d18 <_svfiprintf_r+0x5c>
 8002d14:	2a25      	cmp	r2, #37	; 0x25
 8002d16:	d1f9      	bne.n	8002d0c <_svfiprintf_r+0x50>
 8002d18:	ebba 0b04 	subs.w	fp, sl, r4
 8002d1c:	d00b      	beq.n	8002d36 <_svfiprintf_r+0x7a>
 8002d1e:	465b      	mov	r3, fp
 8002d20:	4622      	mov	r2, r4
 8002d22:	4629      	mov	r1, r5
 8002d24:	4638      	mov	r0, r7
 8002d26:	f7ff ff6d 	bl	8002c04 <__ssputs_r>
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	f000 80aa 	beq.w	8002e84 <_svfiprintf_r+0x1c8>
 8002d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d32:	445a      	add	r2, fp
 8002d34:	9209      	str	r2, [sp, #36]	; 0x24
 8002d36:	f89a 3000 	ldrb.w	r3, [sl]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80a2 	beq.w	8002e84 <_svfiprintf_r+0x1c8>
 8002d40:	2300      	movs	r3, #0
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295
 8002d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d4a:	f10a 0a01 	add.w	sl, sl, #1
 8002d4e:	9304      	str	r3, [sp, #16]
 8002d50:	9307      	str	r3, [sp, #28]
 8002d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d56:	931a      	str	r3, [sp, #104]	; 0x68
 8002d58:	4654      	mov	r4, sl
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d60:	4851      	ldr	r0, [pc, #324]	; (8002ea8 <_svfiprintf_r+0x1ec>)
 8002d62:	f7fd fa45 	bl	80001f0 <memchr>
 8002d66:	9a04      	ldr	r2, [sp, #16]
 8002d68:	b9d8      	cbnz	r0, 8002da2 <_svfiprintf_r+0xe6>
 8002d6a:	06d0      	lsls	r0, r2, #27
 8002d6c:	bf44      	itt	mi
 8002d6e:	2320      	movmi	r3, #32
 8002d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d74:	0711      	lsls	r1, r2, #28
 8002d76:	bf44      	itt	mi
 8002d78:	232b      	movmi	r3, #43	; 0x2b
 8002d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d82:	2b2a      	cmp	r3, #42	; 0x2a
 8002d84:	d015      	beq.n	8002db2 <_svfiprintf_r+0xf6>
 8002d86:	9a07      	ldr	r2, [sp, #28]
 8002d88:	4654      	mov	r4, sl
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f04f 0c0a 	mov.w	ip, #10
 8002d90:	4621      	mov	r1, r4
 8002d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d96:	3b30      	subs	r3, #48	; 0x30
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	d94e      	bls.n	8002e3a <_svfiprintf_r+0x17e>
 8002d9c:	b1b0      	cbz	r0, 8002dcc <_svfiprintf_r+0x110>
 8002d9e:	9207      	str	r2, [sp, #28]
 8002da0:	e014      	b.n	8002dcc <_svfiprintf_r+0x110>
 8002da2:	eba0 0308 	sub.w	r3, r0, r8
 8002da6:	fa09 f303 	lsl.w	r3, r9, r3
 8002daa:	4313      	orrs	r3, r2
 8002dac:	9304      	str	r3, [sp, #16]
 8002dae:	46a2      	mov	sl, r4
 8002db0:	e7d2      	b.n	8002d58 <_svfiprintf_r+0x9c>
 8002db2:	9b03      	ldr	r3, [sp, #12]
 8002db4:	1d19      	adds	r1, r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	9103      	str	r1, [sp, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bfbb      	ittet	lt
 8002dbe:	425b      	neglt	r3, r3
 8002dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8002dc4:	9307      	strge	r3, [sp, #28]
 8002dc6:	9307      	strlt	r3, [sp, #28]
 8002dc8:	bfb8      	it	lt
 8002dca:	9204      	strlt	r2, [sp, #16]
 8002dcc:	7823      	ldrb	r3, [r4, #0]
 8002dce:	2b2e      	cmp	r3, #46	; 0x2e
 8002dd0:	d10c      	bne.n	8002dec <_svfiprintf_r+0x130>
 8002dd2:	7863      	ldrb	r3, [r4, #1]
 8002dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd6:	d135      	bne.n	8002e44 <_svfiprintf_r+0x188>
 8002dd8:	9b03      	ldr	r3, [sp, #12]
 8002dda:	1d1a      	adds	r2, r3, #4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	9203      	str	r2, [sp, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bfb8      	it	lt
 8002de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002de8:	3402      	adds	r4, #2
 8002dea:	9305      	str	r3, [sp, #20]
 8002dec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002eb8 <_svfiprintf_r+0x1fc>
 8002df0:	7821      	ldrb	r1, [r4, #0]
 8002df2:	2203      	movs	r2, #3
 8002df4:	4650      	mov	r0, sl
 8002df6:	f7fd f9fb 	bl	80001f0 <memchr>
 8002dfa:	b140      	cbz	r0, 8002e0e <_svfiprintf_r+0x152>
 8002dfc:	2340      	movs	r3, #64	; 0x40
 8002dfe:	eba0 000a 	sub.w	r0, r0, sl
 8002e02:	fa03 f000 	lsl.w	r0, r3, r0
 8002e06:	9b04      	ldr	r3, [sp, #16]
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	3401      	adds	r4, #1
 8002e0c:	9304      	str	r3, [sp, #16]
 8002e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e12:	4826      	ldr	r0, [pc, #152]	; (8002eac <_svfiprintf_r+0x1f0>)
 8002e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e18:	2206      	movs	r2, #6
 8002e1a:	f7fd f9e9 	bl	80001f0 <memchr>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d038      	beq.n	8002e94 <_svfiprintf_r+0x1d8>
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <_svfiprintf_r+0x1f4>)
 8002e24:	bb1b      	cbnz	r3, 8002e6e <_svfiprintf_r+0x1b2>
 8002e26:	9b03      	ldr	r3, [sp, #12]
 8002e28:	3307      	adds	r3, #7
 8002e2a:	f023 0307 	bic.w	r3, r3, #7
 8002e2e:	3308      	adds	r3, #8
 8002e30:	9303      	str	r3, [sp, #12]
 8002e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e34:	4433      	add	r3, r6
 8002e36:	9309      	str	r3, [sp, #36]	; 0x24
 8002e38:	e767      	b.n	8002d0a <_svfiprintf_r+0x4e>
 8002e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e3e:	460c      	mov	r4, r1
 8002e40:	2001      	movs	r0, #1
 8002e42:	e7a5      	b.n	8002d90 <_svfiprintf_r+0xd4>
 8002e44:	2300      	movs	r3, #0
 8002e46:	3401      	adds	r4, #1
 8002e48:	9305      	str	r3, [sp, #20]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f04f 0c0a 	mov.w	ip, #10
 8002e50:	4620      	mov	r0, r4
 8002e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e56:	3a30      	subs	r2, #48	; 0x30
 8002e58:	2a09      	cmp	r2, #9
 8002e5a:	d903      	bls.n	8002e64 <_svfiprintf_r+0x1a8>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0c5      	beq.n	8002dec <_svfiprintf_r+0x130>
 8002e60:	9105      	str	r1, [sp, #20]
 8002e62:	e7c3      	b.n	8002dec <_svfiprintf_r+0x130>
 8002e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e68:	4604      	mov	r4, r0
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e7f0      	b.n	8002e50 <_svfiprintf_r+0x194>
 8002e6e:	ab03      	add	r3, sp, #12
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	462a      	mov	r2, r5
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <_svfiprintf_r+0x1f8>)
 8002e76:	a904      	add	r1, sp, #16
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f3af 8000 	nop.w
 8002e7e:	1c42      	adds	r2, r0, #1
 8002e80:	4606      	mov	r6, r0
 8002e82:	d1d6      	bne.n	8002e32 <_svfiprintf_r+0x176>
 8002e84:	89ab      	ldrh	r3, [r5, #12]
 8002e86:	065b      	lsls	r3, r3, #25
 8002e88:	f53f af2c 	bmi.w	8002ce4 <_svfiprintf_r+0x28>
 8002e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e8e:	b01d      	add	sp, #116	; 0x74
 8002e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e94:	ab03      	add	r3, sp, #12
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	462a      	mov	r2, r5
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <_svfiprintf_r+0x1f8>)
 8002e9c:	a904      	add	r1, sp, #16
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	f000 f87a 	bl	8002f98 <_printf_i>
 8002ea4:	e7eb      	b.n	8002e7e <_svfiprintf_r+0x1c2>
 8002ea6:	bf00      	nop
 8002ea8:	08003314 	.word	0x08003314
 8002eac:	0800331e 	.word	0x0800331e
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	08002c05 	.word	0x08002c05
 8002eb8:	0800331a 	.word	0x0800331a

08002ebc <_printf_common>:
 8002ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec0:	4616      	mov	r6, r2
 8002ec2:	4699      	mov	r9, r3
 8002ec4:	688a      	ldr	r2, [r1, #8]
 8002ec6:	690b      	ldr	r3, [r1, #16]
 8002ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bfb8      	it	lt
 8002ed0:	4613      	movlt	r3, r2
 8002ed2:	6033      	str	r3, [r6, #0]
 8002ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ed8:	4607      	mov	r7, r0
 8002eda:	460c      	mov	r4, r1
 8002edc:	b10a      	cbz	r2, 8002ee2 <_printf_common+0x26>
 8002ede:	3301      	adds	r3, #1
 8002ee0:	6033      	str	r3, [r6, #0]
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	0699      	lsls	r1, r3, #26
 8002ee6:	bf42      	ittt	mi
 8002ee8:	6833      	ldrmi	r3, [r6, #0]
 8002eea:	3302      	addmi	r3, #2
 8002eec:	6033      	strmi	r3, [r6, #0]
 8002eee:	6825      	ldr	r5, [r4, #0]
 8002ef0:	f015 0506 	ands.w	r5, r5, #6
 8002ef4:	d106      	bne.n	8002f04 <_printf_common+0x48>
 8002ef6:	f104 0a19 	add.w	sl, r4, #25
 8002efa:	68e3      	ldr	r3, [r4, #12]
 8002efc:	6832      	ldr	r2, [r6, #0]
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	42ab      	cmp	r3, r5
 8002f02:	dc26      	bgt.n	8002f52 <_printf_common+0x96>
 8002f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f08:	1e13      	subs	r3, r2, #0
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	bf18      	it	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	0692      	lsls	r2, r2, #26
 8002f12:	d42b      	bmi.n	8002f6c <_printf_common+0xb0>
 8002f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f18:	4649      	mov	r1, r9
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	47c0      	blx	r8
 8002f1e:	3001      	adds	r0, #1
 8002f20:	d01e      	beq.n	8002f60 <_printf_common+0xa4>
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	68e5      	ldr	r5, [r4, #12]
 8002f26:	6832      	ldr	r2, [r6, #0]
 8002f28:	f003 0306 	and.w	r3, r3, #6
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	bf08      	it	eq
 8002f30:	1aad      	subeq	r5, r5, r2
 8002f32:	68a3      	ldr	r3, [r4, #8]
 8002f34:	6922      	ldr	r2, [r4, #16]
 8002f36:	bf0c      	ite	eq
 8002f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f3c:	2500      	movne	r5, #0
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	bfc4      	itt	gt
 8002f42:	1a9b      	subgt	r3, r3, r2
 8002f44:	18ed      	addgt	r5, r5, r3
 8002f46:	2600      	movs	r6, #0
 8002f48:	341a      	adds	r4, #26
 8002f4a:	42b5      	cmp	r5, r6
 8002f4c:	d11a      	bne.n	8002f84 <_printf_common+0xc8>
 8002f4e:	2000      	movs	r0, #0
 8002f50:	e008      	b.n	8002f64 <_printf_common+0xa8>
 8002f52:	2301      	movs	r3, #1
 8002f54:	4652      	mov	r2, sl
 8002f56:	4649      	mov	r1, r9
 8002f58:	4638      	mov	r0, r7
 8002f5a:	47c0      	blx	r8
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d103      	bne.n	8002f68 <_printf_common+0xac>
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f68:	3501      	adds	r5, #1
 8002f6a:	e7c6      	b.n	8002efa <_printf_common+0x3e>
 8002f6c:	18e1      	adds	r1, r4, r3
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	2030      	movs	r0, #48	; 0x30
 8002f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f76:	4422      	add	r2, r4
 8002f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f80:	3302      	adds	r3, #2
 8002f82:	e7c7      	b.n	8002f14 <_printf_common+0x58>
 8002f84:	2301      	movs	r3, #1
 8002f86:	4622      	mov	r2, r4
 8002f88:	4649      	mov	r1, r9
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	47c0      	blx	r8
 8002f8e:	3001      	adds	r0, #1
 8002f90:	d0e6      	beq.n	8002f60 <_printf_common+0xa4>
 8002f92:	3601      	adds	r6, #1
 8002f94:	e7d9      	b.n	8002f4a <_printf_common+0x8e>
	...

08002f98 <_printf_i>:
 8002f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	4691      	mov	r9, r2
 8002fa0:	7e27      	ldrb	r7, [r4, #24]
 8002fa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fa4:	2f78      	cmp	r7, #120	; 0x78
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	469a      	mov	sl, r3
 8002faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fae:	d807      	bhi.n	8002fc0 <_printf_i+0x28>
 8002fb0:	2f62      	cmp	r7, #98	; 0x62
 8002fb2:	d80a      	bhi.n	8002fca <_printf_i+0x32>
 8002fb4:	2f00      	cmp	r7, #0
 8002fb6:	f000 80d8 	beq.w	800316a <_printf_i+0x1d2>
 8002fba:	2f58      	cmp	r7, #88	; 0x58
 8002fbc:	f000 80a3 	beq.w	8003106 <_printf_i+0x16e>
 8002fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fc8:	e03a      	b.n	8003040 <_printf_i+0xa8>
 8002fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fce:	2b15      	cmp	r3, #21
 8002fd0:	d8f6      	bhi.n	8002fc0 <_printf_i+0x28>
 8002fd2:	a001      	add	r0, pc, #4	; (adr r0, 8002fd8 <_printf_i+0x40>)
 8002fd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fd8:	08003031 	.word	0x08003031
 8002fdc:	08003045 	.word	0x08003045
 8002fe0:	08002fc1 	.word	0x08002fc1
 8002fe4:	08002fc1 	.word	0x08002fc1
 8002fe8:	08002fc1 	.word	0x08002fc1
 8002fec:	08002fc1 	.word	0x08002fc1
 8002ff0:	08003045 	.word	0x08003045
 8002ff4:	08002fc1 	.word	0x08002fc1
 8002ff8:	08002fc1 	.word	0x08002fc1
 8002ffc:	08002fc1 	.word	0x08002fc1
 8003000:	08002fc1 	.word	0x08002fc1
 8003004:	08003151 	.word	0x08003151
 8003008:	08003075 	.word	0x08003075
 800300c:	08003133 	.word	0x08003133
 8003010:	08002fc1 	.word	0x08002fc1
 8003014:	08002fc1 	.word	0x08002fc1
 8003018:	08003173 	.word	0x08003173
 800301c:	08002fc1 	.word	0x08002fc1
 8003020:	08003075 	.word	0x08003075
 8003024:	08002fc1 	.word	0x08002fc1
 8003028:	08002fc1 	.word	0x08002fc1
 800302c:	0800313b 	.word	0x0800313b
 8003030:	680b      	ldr	r3, [r1, #0]
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	600a      	str	r2, [r1, #0]
 8003038:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800303c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003040:	2301      	movs	r3, #1
 8003042:	e0a3      	b.n	800318c <_printf_i+0x1f4>
 8003044:	6825      	ldr	r5, [r4, #0]
 8003046:	6808      	ldr	r0, [r1, #0]
 8003048:	062e      	lsls	r6, r5, #24
 800304a:	f100 0304 	add.w	r3, r0, #4
 800304e:	d50a      	bpl.n	8003066 <_printf_i+0xce>
 8003050:	6805      	ldr	r5, [r0, #0]
 8003052:	600b      	str	r3, [r1, #0]
 8003054:	2d00      	cmp	r5, #0
 8003056:	da03      	bge.n	8003060 <_printf_i+0xc8>
 8003058:	232d      	movs	r3, #45	; 0x2d
 800305a:	426d      	negs	r5, r5
 800305c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003060:	485e      	ldr	r0, [pc, #376]	; (80031dc <_printf_i+0x244>)
 8003062:	230a      	movs	r3, #10
 8003064:	e019      	b.n	800309a <_printf_i+0x102>
 8003066:	f015 0f40 	tst.w	r5, #64	; 0x40
 800306a:	6805      	ldr	r5, [r0, #0]
 800306c:	600b      	str	r3, [r1, #0]
 800306e:	bf18      	it	ne
 8003070:	b22d      	sxthne	r5, r5
 8003072:	e7ef      	b.n	8003054 <_printf_i+0xbc>
 8003074:	680b      	ldr	r3, [r1, #0]
 8003076:	6825      	ldr	r5, [r4, #0]
 8003078:	1d18      	adds	r0, r3, #4
 800307a:	6008      	str	r0, [r1, #0]
 800307c:	0628      	lsls	r0, r5, #24
 800307e:	d501      	bpl.n	8003084 <_printf_i+0xec>
 8003080:	681d      	ldr	r5, [r3, #0]
 8003082:	e002      	b.n	800308a <_printf_i+0xf2>
 8003084:	0669      	lsls	r1, r5, #25
 8003086:	d5fb      	bpl.n	8003080 <_printf_i+0xe8>
 8003088:	881d      	ldrh	r5, [r3, #0]
 800308a:	4854      	ldr	r0, [pc, #336]	; (80031dc <_printf_i+0x244>)
 800308c:	2f6f      	cmp	r7, #111	; 0x6f
 800308e:	bf0c      	ite	eq
 8003090:	2308      	moveq	r3, #8
 8003092:	230a      	movne	r3, #10
 8003094:	2100      	movs	r1, #0
 8003096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800309a:	6866      	ldr	r6, [r4, #4]
 800309c:	60a6      	str	r6, [r4, #8]
 800309e:	2e00      	cmp	r6, #0
 80030a0:	bfa2      	ittt	ge
 80030a2:	6821      	ldrge	r1, [r4, #0]
 80030a4:	f021 0104 	bicge.w	r1, r1, #4
 80030a8:	6021      	strge	r1, [r4, #0]
 80030aa:	b90d      	cbnz	r5, 80030b0 <_printf_i+0x118>
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	d04d      	beq.n	800314c <_printf_i+0x1b4>
 80030b0:	4616      	mov	r6, r2
 80030b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80030b6:	fb03 5711 	mls	r7, r3, r1, r5
 80030ba:	5dc7      	ldrb	r7, [r0, r7]
 80030bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030c0:	462f      	mov	r7, r5
 80030c2:	42bb      	cmp	r3, r7
 80030c4:	460d      	mov	r5, r1
 80030c6:	d9f4      	bls.n	80030b2 <_printf_i+0x11a>
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d10b      	bne.n	80030e4 <_printf_i+0x14c>
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	07df      	lsls	r7, r3, #31
 80030d0:	d508      	bpl.n	80030e4 <_printf_i+0x14c>
 80030d2:	6923      	ldr	r3, [r4, #16]
 80030d4:	6861      	ldr	r1, [r4, #4]
 80030d6:	4299      	cmp	r1, r3
 80030d8:	bfde      	ittt	le
 80030da:	2330      	movle	r3, #48	; 0x30
 80030dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030e4:	1b92      	subs	r2, r2, r6
 80030e6:	6122      	str	r2, [r4, #16]
 80030e8:	f8cd a000 	str.w	sl, [sp]
 80030ec:	464b      	mov	r3, r9
 80030ee:	aa03      	add	r2, sp, #12
 80030f0:	4621      	mov	r1, r4
 80030f2:	4640      	mov	r0, r8
 80030f4:	f7ff fee2 	bl	8002ebc <_printf_common>
 80030f8:	3001      	adds	r0, #1
 80030fa:	d14c      	bne.n	8003196 <_printf_i+0x1fe>
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	b004      	add	sp, #16
 8003102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003106:	4835      	ldr	r0, [pc, #212]	; (80031dc <_printf_i+0x244>)
 8003108:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	680e      	ldr	r6, [r1, #0]
 8003110:	061f      	lsls	r7, r3, #24
 8003112:	f856 5b04 	ldr.w	r5, [r6], #4
 8003116:	600e      	str	r6, [r1, #0]
 8003118:	d514      	bpl.n	8003144 <_printf_i+0x1ac>
 800311a:	07d9      	lsls	r1, r3, #31
 800311c:	bf44      	itt	mi
 800311e:	f043 0320 	orrmi.w	r3, r3, #32
 8003122:	6023      	strmi	r3, [r4, #0]
 8003124:	b91d      	cbnz	r5, 800312e <_printf_i+0x196>
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	f023 0320 	bic.w	r3, r3, #32
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	2310      	movs	r3, #16
 8003130:	e7b0      	b.n	8003094 <_printf_i+0xfc>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	f043 0320 	orr.w	r3, r3, #32
 8003138:	6023      	str	r3, [r4, #0]
 800313a:	2378      	movs	r3, #120	; 0x78
 800313c:	4828      	ldr	r0, [pc, #160]	; (80031e0 <_printf_i+0x248>)
 800313e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003142:	e7e3      	b.n	800310c <_printf_i+0x174>
 8003144:	065e      	lsls	r6, r3, #25
 8003146:	bf48      	it	mi
 8003148:	b2ad      	uxthmi	r5, r5
 800314a:	e7e6      	b.n	800311a <_printf_i+0x182>
 800314c:	4616      	mov	r6, r2
 800314e:	e7bb      	b.n	80030c8 <_printf_i+0x130>
 8003150:	680b      	ldr	r3, [r1, #0]
 8003152:	6826      	ldr	r6, [r4, #0]
 8003154:	6960      	ldr	r0, [r4, #20]
 8003156:	1d1d      	adds	r5, r3, #4
 8003158:	600d      	str	r5, [r1, #0]
 800315a:	0635      	lsls	r5, r6, #24
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	d501      	bpl.n	8003164 <_printf_i+0x1cc>
 8003160:	6018      	str	r0, [r3, #0]
 8003162:	e002      	b.n	800316a <_printf_i+0x1d2>
 8003164:	0671      	lsls	r1, r6, #25
 8003166:	d5fb      	bpl.n	8003160 <_printf_i+0x1c8>
 8003168:	8018      	strh	r0, [r3, #0]
 800316a:	2300      	movs	r3, #0
 800316c:	6123      	str	r3, [r4, #16]
 800316e:	4616      	mov	r6, r2
 8003170:	e7ba      	b.n	80030e8 <_printf_i+0x150>
 8003172:	680b      	ldr	r3, [r1, #0]
 8003174:	1d1a      	adds	r2, r3, #4
 8003176:	600a      	str	r2, [r1, #0]
 8003178:	681e      	ldr	r6, [r3, #0]
 800317a:	6862      	ldr	r2, [r4, #4]
 800317c:	2100      	movs	r1, #0
 800317e:	4630      	mov	r0, r6
 8003180:	f7fd f836 	bl	80001f0 <memchr>
 8003184:	b108      	cbz	r0, 800318a <_printf_i+0x1f2>
 8003186:	1b80      	subs	r0, r0, r6
 8003188:	6060      	str	r0, [r4, #4]
 800318a:	6863      	ldr	r3, [r4, #4]
 800318c:	6123      	str	r3, [r4, #16]
 800318e:	2300      	movs	r3, #0
 8003190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003194:	e7a8      	b.n	80030e8 <_printf_i+0x150>
 8003196:	6923      	ldr	r3, [r4, #16]
 8003198:	4632      	mov	r2, r6
 800319a:	4649      	mov	r1, r9
 800319c:	4640      	mov	r0, r8
 800319e:	47d0      	blx	sl
 80031a0:	3001      	adds	r0, #1
 80031a2:	d0ab      	beq.n	80030fc <_printf_i+0x164>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	079b      	lsls	r3, r3, #30
 80031a8:	d413      	bmi.n	80031d2 <_printf_i+0x23a>
 80031aa:	68e0      	ldr	r0, [r4, #12]
 80031ac:	9b03      	ldr	r3, [sp, #12]
 80031ae:	4298      	cmp	r0, r3
 80031b0:	bfb8      	it	lt
 80031b2:	4618      	movlt	r0, r3
 80031b4:	e7a4      	b.n	8003100 <_printf_i+0x168>
 80031b6:	2301      	movs	r3, #1
 80031b8:	4632      	mov	r2, r6
 80031ba:	4649      	mov	r1, r9
 80031bc:	4640      	mov	r0, r8
 80031be:	47d0      	blx	sl
 80031c0:	3001      	adds	r0, #1
 80031c2:	d09b      	beq.n	80030fc <_printf_i+0x164>
 80031c4:	3501      	adds	r5, #1
 80031c6:	68e3      	ldr	r3, [r4, #12]
 80031c8:	9903      	ldr	r1, [sp, #12]
 80031ca:	1a5b      	subs	r3, r3, r1
 80031cc:	42ab      	cmp	r3, r5
 80031ce:	dcf2      	bgt.n	80031b6 <_printf_i+0x21e>
 80031d0:	e7eb      	b.n	80031aa <_printf_i+0x212>
 80031d2:	2500      	movs	r5, #0
 80031d4:	f104 0619 	add.w	r6, r4, #25
 80031d8:	e7f5      	b.n	80031c6 <_printf_i+0x22e>
 80031da:	bf00      	nop
 80031dc:	08003325 	.word	0x08003325
 80031e0:	08003336 	.word	0x08003336

080031e4 <__retarget_lock_acquire_recursive>:
 80031e4:	4770      	bx	lr

080031e6 <__retarget_lock_release_recursive>:
 80031e6:	4770      	bx	lr

080031e8 <memcpy>:
 80031e8:	440a      	add	r2, r1
 80031ea:	4291      	cmp	r1, r2
 80031ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80031f0:	d100      	bne.n	80031f4 <memcpy+0xc>
 80031f2:	4770      	bx	lr
 80031f4:	b510      	push	{r4, lr}
 80031f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031fe:	4291      	cmp	r1, r2
 8003200:	d1f9      	bne.n	80031f6 <memcpy+0xe>
 8003202:	bd10      	pop	{r4, pc}

08003204 <memmove>:
 8003204:	4288      	cmp	r0, r1
 8003206:	b510      	push	{r4, lr}
 8003208:	eb01 0402 	add.w	r4, r1, r2
 800320c:	d902      	bls.n	8003214 <memmove+0x10>
 800320e:	4284      	cmp	r4, r0
 8003210:	4623      	mov	r3, r4
 8003212:	d807      	bhi.n	8003224 <memmove+0x20>
 8003214:	1e43      	subs	r3, r0, #1
 8003216:	42a1      	cmp	r1, r4
 8003218:	d008      	beq.n	800322c <memmove+0x28>
 800321a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800321e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003222:	e7f8      	b.n	8003216 <memmove+0x12>
 8003224:	4402      	add	r2, r0
 8003226:	4601      	mov	r1, r0
 8003228:	428a      	cmp	r2, r1
 800322a:	d100      	bne.n	800322e <memmove+0x2a>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003236:	e7f7      	b.n	8003228 <memmove+0x24>

08003238 <_realloc_r>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	4607      	mov	r7, r0
 800323c:	4614      	mov	r4, r2
 800323e:	460e      	mov	r6, r1
 8003240:	b921      	cbnz	r1, 800324c <_realloc_r+0x14>
 8003242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003246:	4611      	mov	r1, r2
 8003248:	f7ff bc46 	b.w	8002ad8 <_malloc_r>
 800324c:	b922      	cbnz	r2, 8003258 <_realloc_r+0x20>
 800324e:	f7ff fbf3 	bl	8002a38 <_free_r>
 8003252:	4625      	mov	r5, r4
 8003254:	4628      	mov	r0, r5
 8003256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003258:	f000 f814 	bl	8003284 <_malloc_usable_size_r>
 800325c:	42a0      	cmp	r0, r4
 800325e:	d20f      	bcs.n	8003280 <_realloc_r+0x48>
 8003260:	4621      	mov	r1, r4
 8003262:	4638      	mov	r0, r7
 8003264:	f7ff fc38 	bl	8002ad8 <_malloc_r>
 8003268:	4605      	mov	r5, r0
 800326a:	2800      	cmp	r0, #0
 800326c:	d0f2      	beq.n	8003254 <_realloc_r+0x1c>
 800326e:	4631      	mov	r1, r6
 8003270:	4622      	mov	r2, r4
 8003272:	f7ff ffb9 	bl	80031e8 <memcpy>
 8003276:	4631      	mov	r1, r6
 8003278:	4638      	mov	r0, r7
 800327a:	f7ff fbdd 	bl	8002a38 <_free_r>
 800327e:	e7e9      	b.n	8003254 <_realloc_r+0x1c>
 8003280:	4635      	mov	r5, r6
 8003282:	e7e7      	b.n	8003254 <_realloc_r+0x1c>

08003284 <_malloc_usable_size_r>:
 8003284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003288:	1f18      	subs	r0, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	bfbc      	itt	lt
 800328e:	580b      	ldrlt	r3, [r1, r0]
 8003290:	18c0      	addlt	r0, r0, r3
 8003292:	4770      	bx	lr

08003294 <_init>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr

080032a0 <_fini>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr
